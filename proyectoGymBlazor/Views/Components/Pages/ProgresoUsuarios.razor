@page "/progreso-usuario/{usuarioId:int}"
@inject ProgresoUsuarioService ProgresoUsuarioService

<h3>Progreso del Usuario</h3>

<table class="table">
    <thead>
        <tr>
            <th>Fecha</th>
            <th>Peso (kg)</th>
            <th>% Grasa Corporal</th>
            <th>Tiempo Entrenamiento (hrs)</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var progreso in listaProgresos)
        {
            <tr>
                <td>@progreso.FechaRegistro.ToString("dd/MM/yyyy")</td>
                <td>@progreso.Peso</td>
                <td>@progreso.PorcentajeGrasa</td>
                <td>@progreso.TiempoEntrenamientoHoras</td>
                <td>
                    <button class="btn btn-danger" @onclick="() => EliminarProgreso(progreso.Id)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<h4>Registrar Nuevo Progreso</h4>
<EditForm Model="@nuevoProgreso" OnValidSubmit="RegistrarProgreso">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="fecha" class="form-label">Fecha</label>
        <InputDate id="fecha" class="form-control" @bind-Value="nuevoProgreso.FechaRegistro" />
    </div>
    <div class="mb-3">
        <label for="peso" class="form-label">Peso (kg)</label>
        <InputNumber id="peso" class="form-control" @bind-Value="nuevoProgreso.Peso" />
    </div>
    <div class="mb-3">
        <label for="grasa" class="form-label">% Grasa Corporal</label>
        <InputNumber id="grasa" class="form-control" @bind-Value="nuevoProgreso.PorcentajeGrasa" />
    </div>
    <div class="mb-3">
        <label for="tiempo" class="form-label">Tiempo Entrenamiento (hrs)</label>
        <InputNumber id="tiempo" class="form-control" @bind-Value="nuevoProgreso.TiempoEntrenamientoHoras" />
    </div>
    <button type="submit" class="btn btn-primary">Registrar</button>
</EditForm>

@code {
    [Parameter]
    public int UsuarioId { get; set; }

    private List<ProgresoUsuarioViewModel> listaProgresos = new();
    private ProgresoUsuario nuevoProgreso = new();

    protected override async Task OnInitializedAsync()
    {
        nuevoProgreso.UsuarioId = UsuarioId;
        await CargarProgresos();
    }

    private async Task CargarProgresos()
    {
        listaProgresos = await ProgresoUsuarioService.GetProgresoAsync(UsuarioId);
    }

    private async Task RegistrarProgreso()
    {
        await ProgresoUsuarioService.RegistrarProgresoAsync(nuevoProgreso);
        nuevoProgreso = new ProgresoUsuario { UsuarioId = UsuarioId }; // Reiniciar el formulario
        await CargarProgresos();
    }

    private async Task EliminarProgreso(int id)
    {
        await ProgresoUsuarioService.EliminarProgresoAsync(id);
        await CargarProgresos();
    }
}
