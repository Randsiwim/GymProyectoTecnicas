@page "/reservas"
@using proyectoGymBlazor.Data
@inject GimnasioDbContext DbContext
@inject NavigationManager NavigationManager

<h3>Gestión de Reservas</h3>

<table class="table">
    <thead>
        <tr>
            <th>#</th>
            <th>Usuario</th>
            <th>Clase</th>
            <th>Fecha Reserva</th>
            <th>Tipo Reserva</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var reserva in listaReservas)
        {
            <tr>
                <td>@reserva.ReservaID</td>
                <td>@reserva.UsuarioNombre</td>
                <td>@reserva.ClaseNombre</td>
                <td>@reserva.FechaReserva.ToString("dd/MM/yyyy")</td>
                <td>@reserva.TipoReserva</td>
                <td>
                    <button class="btn btn-secondary btn-sm" @onclick="() => EditarReserva(reserva.ReservaID)">Editar</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => EliminarReserva(reserva.ReservaID)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="NuevaReserva">Agregar Reserva</button>

@code {
    private List<ReservaViewModel> listaReservas = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarReservasDesdeDB();
    }

    private async Task CargarReservasDesdeDB()
    {
        listaReservas = await DbContext.Reservas
            .Join(DbContext.Usuarios,
                reserva => reserva.UsuarioID,
                usuario => usuario.UsuarioID,
                (reserva, usuario) => new { reserva, usuario })
            .Join(DbContext.Clases,
                combinacion => combinacion.reserva.ClaseID,
                clase => clase.ClaseID,
                (combinacion, clase) => new ReservaViewModel
                    {
                        ReservaID = combinacion.reserva.ReservaID,
                        UsuarioID = combinacion.usuario.UsuarioID,
                        UsuarioNombre = combinacion.usuario.Nombre,
                        ClaseNombre = clase.Nombre,
                        FechaReserva = combinacion.reserva.FechaReserva,
                        TipoReserva = combinacion.reserva.TipoReserva
                    }).ToListAsync();
    }

    private void EditarReserva(int reservaID)
    {
        // Navegar a la página de edición
        NavigationManager.NavigateTo($"/reservas/editar/{reservaID}");
    }

    private void EliminarReserva(int reservaID)
    {
        var reserva = listaReservas.FirstOrDefault(r => r.ReservaID == reservaID);
        if (reserva != null)
        {
            listaReservas.Remove(reserva);
            // Actualizar base de datos si es necesario
            Console.WriteLine($"Reserva con ID {reservaID} eliminada.");
        }
    }

    private void NuevaReserva()
    {
        // Navegar a la página para agregar una nueva reserva
        NavigationManager.NavigateTo("/reservas/nueva");
    }

    private class ReservaViewModel
    {
        public int ReservaID { get; set; }
        public int UsuarioID { get; set; }
        public string UsuarioNombre { get; set; }
        public string ClaseNombre { get; set; }
        public DateTime FechaReserva { get; set; }
        public string TipoReserva { get; set; }
    }
}
